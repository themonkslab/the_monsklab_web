import 'package:the_monkslab_web/src/constants/_index.dart';

final dart = AppCourse(
  id: 1,
  title: 'Introducci√≥n a la programaci√≥n y TDD con Dart',
  authors: [
    const AppAuthor(name: 'Mau Di Bert', picture: ''),
    const AppAuthor(name: 'Tin Smith', picture: ''),
  ],
  description:
      'Un curso que ense√±e desde fin a principio, que instale buenas pr√°cticas desde el primer c√≥digo',
  materialsAuthor: 'Mauro Di Bert and Martin Smith',
  content: [
    CourseSection(id: 0, title: 'Introducci√≥n', chapters: [
      CourseChapter(
        id: 0,
        title: 'La verdadera intro',
        description:
            'Ac√° te contamos qu√© pod√©s esperar del curso y qu√© nosotros esperamos de ustedes',
        author: const AppAuthor(name: 'Mau Di Bert', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# La verdadera intro

@Mau Di Bert

Creemos que si est√°s ac√°, es porque est√°s interesado o interesada en volverte un/a profesional al nivel requerido para trabajar en Estados Unidos y Europa.

Para ello, preparamos un camino de aprendizaje pensado de atr√°s hacia adelante: __vas a aprender a testear como primer paso__, de manera que escribir c√≥digo de alta calidad sea una extensi√≥n de tu cuerpo y puedas __destinar tiempo a lo m√°s divertido, crear__.

## Comunidad

Antes de que sigas, [sumate a nuestra comunidad gratuita en Discord](), donde vas a encontrar un grupo hermoso de personas apasionadas por aprender y crecer en este mundo.

Ah√≠ vas a poder presentarte, hacer preguntas, aprender mientras ayud√°s a otros y a otras a resolver las suyas y divertirte con personas como vos, apasionadas por aprender y compartir este apasionante mundo!

## Algunas recomendaciones

No tengas miedo en __tomarte el tiempo que sea necesario para entender__: mejor lento pero seguro. Volv√© a lecciones pasadas, repet√≠ los ejercicios y trat√° de aprender como si fueras a ense√±arlo.

No copies y pegues __el c√≥digo__ sino __escribilo vos mismo o misma.__ Es impresionante lo que sucede cuando para escribirlo tenemos que entenderlo.

Trat√° de __leer todo desde el comienzo y tranquilamente__: art√≠culos, c√≥digo, mensajes de error. Traduc√≠ lo que no entiendas si est√° en ingl√©s.

Adem√°s, vas a encontrar muchos t√©rminos en _ingl√©s_ en cursiva aqu√≠ mismo: recomendamos que organices __tu propio glosario de estos t√©rminos__ que te va a ayudar a fijar estos conceptos.

Vas a notar, que mucha parte del tiempo, no ahondamos en ciertos conceptos o explicaciones pero quedate tranquilo que eso llegar√° m√°s adelante. Lo hacemos para que puedas avanzar, aprendiendo lo suficiente para crear y no frustrarte!

__Vas a aprender haciendo__ as√≠ que trat√° de hacer los ejercicios alternativos propuestos e inventar nuevos y compartirlos luego con otrxs en nuestro Discord.

## Respondiendo a tus preguntas

Si hay algo que no entend√©s, segu√≠ [esta gu√≠a]() para tratar de responderte vos mismx en primer lugar (una habilidad que todo programador debe dominar) y sino lo logr√°s, buscar respuestas de forma respetuosa e inteligente para con el tiempo de los otros y otras.
''',
      ),
      CourseChapter(
        id: 1,
        title: 'Introducci√≥n a Dart',
        description:
            'Ac√° te contamos qu√© pod√©s esperar del curso y qu√© nosotros esperamos de ustedes',
        author: const AppAuthor(name: 'Tin Smith', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# Introducci√≥n a Dart

@Tin Smith

''',
      ),
      CourseChapter(
        id: 2,
        title: 'Introducci√≥n a DartPad',
        description:
            'Ac√° te contamos qu√© pod√©s esperar del curso y qu√© nosotros esperamos de ustedes',
        author: const AppAuthor(name: 'Mau Di Bert', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# Introducci√≥n a Dartpad

@Mau Di Bert

Dart viene con una herramienta para r√°pidamente escribir c√≥digo Dart online y ver el _output_ (la salida, lo que se ve), de dicho c√≥digo. Esa herramienta se llama [Dartpad](https://dartpad.dev) y es totalmente gratuita. Lo vamos a utilizar para las primeras partes de este curso.

![Dartpad basics](https://raw.githubusercontent.com/themonkslab/courses/main/dart/assets/1.4.1_dartpad_basics.png)

![Dartpad basics errors and rest](https://raw.githubusercontent.com/themonkslab/courses/main/dart/assets/1.4.2_dartpad_basics_errors_and_rest.png)

''',
      ),
    ]),
    CourseSection(id: 1, title: 'Dart B√°sico', chapters: [
      CourseChapter(
        id: 0,
        title: 'Dart b√°sico',
        description:
            'Esta secci√≥n es para incluso quienes jam√°s vieron una l√≠nea de c√≥digo',
        author: const AppAuthor(name: 'Mau Di Bert', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# Dart b√°sico

@Mau Di Bert

Esta secci√≥n es para incluso quienes jam√°s vieron una l√≠nea de c√≥digo. Vamos a ver:

- variables y tipos b√°sicos
- declaraci√≥n, inicializaci√≥n y asignaci√≥n
- strings y tipos num√©ricos
- operadores

Al final, vas a poder escribir programas simples en Dart!
''',
      ),
      CourseChapter(
        id: 1,
        title: 'El m√©todo main',
        description: '',
        author: const AppAuthor(name: 'Mau Di Bert', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# El m√©todo main

@Mau Di Bert

Un programa de Dart es v√°lido solamente si contiene un m√©todo main. Sino, prueben borrar todo y ver lo que aparece en consola. Probaron? üòí ... üòè ... üßê:

![M√©todo main no encontrado](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.2.1_metodo_main_no_encontrado.png)

El m√©todo main es __tambi√©n llamado _entry point_ o punto de entrada__ de nuestro programa y es el que va a recibir todo nuestro c√≥digo.

Prueben ahora crearlo de la siguiente manera agregando las siguientes l√≠neas de c√≥digo:

``` dart
void main() {

}
```

Ah! Y qu√© es ese bloque de texto que aparece con colores? En lugar ahora de mostrarles una imagen, les mostramos este __bloque de c√≥digo__: pueden copiarlo y pegarlo f√°cilmente aunque ya saben que eso no les va a ense√±ar nada ü•∏: para aprender tienen que escribir ustedes mismos cada letra de cada c√≥digo. Sin embargo, les quer√≠amos mostrar esto porque a futuro, si ustedes suben c√≥digo para que alguien m√°s lo vea, por ejemplo en alg√∫n ejercicio o en su trabajo, es recomendable hacerlo as√≠ para que quien pruebe su c√≥digo, pueda correrlo f√°cilmente solo mediante copiar y pegar. Sino, imag√≠nense que quien quiera ayudarlos tiene que copiar miles de l√≠neas adem√°s de encontrar c√≥mo darles una mano! ü§£

![M√©todo main escrito, no m√°s problemas!](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.2.2_main_sin_problemas.png
)

## TDD o nuestra forma particular de ense√±arnos

Vieron lo que hicimos? 

1. Corrimos el programa sin haber escrito un _main method_.
2. eso lo _rompi√≥_ y 
3. lo _arreglamos_ escribiendo un c√≥digo nuevo, el _main method_.

__Esto se llama _TDD_ o _Test Driven Design_, escribir c√≥digo desde los tests.__

Si bien no es que vamos a usar este m√©todo todo el tiempo, __el hacer _tests_ de aquello que escribimos es una ayuda invaluable__: cada test funciona como un peque√±o robot que va a chequear que todo funciona como esperamos sin tener nosotros que manualmente correr la aplicaci√≥n entera, ir hasta el lugar para hacer esa cosa que deber√≠a hacer, esa otra y finalmente, la otra! üï∫üèª __En cuesti√≥n de segundos podemos correr miles de pruebas que nos llevar√≠an d√≠as o semanas de probar manualmente__ y asegurarnos que cada pieza nueva que escribamos, va a encajar con el resto.

Esto es un __est√°ndar en la industria__ cuando queremos llegar a trabajar para el primer nivel y __aprenderlo desde el comienzo__, va a hacer que sea muy natural para vos hacerlo luego, sin esfuerzos extras! üí™

''',
      ),
      CourseChapter(
        id: 2,
        title: 'Nuestro primer programa',
        description: '',
        author: const AppAuthor(name: 'Mau Di Bert', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# Nuestro primer programa

Como les contamos en el art√≠culo anterior, queremos que aprendan a crear __tests primero__ que nada, ejecuten el programa, el programa se rompa y sepan qu√© c√≥digo tienen que escribir.

## Requerimientos?

Como ahora estamos __utilizando _Dartpad_, no contamos con herramientas espec√≠ficas de testing__ y por ello, vamos a ir cambiando las formas en las que creamos nuestros tests.

Vamos a crear una serie de reglas llamadas __requerimientos o _requirements_: es lo que queremos que nuestro programa haga__. Vamos a obviar aqu√≠ los tests o marcado de errores que ya el mismo lenguaje utiliza. Por ejemplo, si no escribimos el _main method_, sin que escribamos ning√∫n test, el lenguaje nos marca autom√°ticamente el error; esto suceder√° en muchos otros casos y es una enorme ayuda cuando escribamos cientos de l√≠neas de c√≥digo.

## Hello world u hola mundo

Es el programa m√°s sencillo de todos y es casi una _convention_ o convenci√≥n empezar con √©l: imprimir en pantalla "Hola mundo!" y he all√≠ nuestro requerimiento primero:

_Requirement_: imprimir en pantalla "Hola mundo".

Para ello, vamos a escribir las siguientes l√≠neas de c√≥digo:

```dart
void main() {
    print('hola mundo')
}
```

Qu√© pudieron ver en _Dartpad_? Algo as√≠?

![Falta punto y coma](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.3.1_falta_punto_y_coma.png)

Prueben correr el programa sin solucionar el error como _Dartpad_ se los recomienda.

![Programa no corre](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.3.2_programa_no_corre_falta_punto_y_coma.png)

En este caso, pudieron ver que no tuvimos que crear ning√∫n test para asegurarnos de que la l√≠nea tiene que estar escrita de cierta manera, siguiendo [ciertas reglas](https://dart.dev/guides/language/language-tour)?: Dart lo hace √©l mismo.

Si ustedes agregan dicha l√≠nea y lo corren, deber√≠amos ver el resultado esperado... verdad? ü§î Qu√© imprimi√≥ la consola? Cu√°l era el requerimiento? Mientras piensan esto inconscientemente, les contamos algo m√°s.

## Formato

Si ustedes copiaron el c√≥digo de la misma forma que yo lo escrib√≠, habr√≠an hecho esto:

1. void main () {}
2. Entraron dentro de los {}
3. Dentro teclearon _enter_

Qu√© pas√≥? Si no lo hicieron, borren todo y h√°ganlo de vuelta as√≠ pueden notar ustedes mismos qu√© sucede: Dart cuenta con un sistema que __adem√°s de corregir los errores, puede corregir c√≥mo escribimos, el estilo__.

As√≠, agrega espacios para indicar m√°s claramente que un pedazo de c√≥digo est√° dentro de otro pedazo, o colores para diferenciar palabras clave y mucho m√°s.

Prueben tambi√©n qu√© sucede si borran esos espacios y lo corren. Pudieron ver que funciona perfectamente salvo que es apenas m√°s dif√≠cil de leer? Y ustedes dir√°n 'son dos espacios, no es m√°s dif√≠cil'. Pero compru√©benlo ustedes mismos: qu√© c√≥digo les parece m√°s f√°cil y placentero de ver? ü§®

![Formato o no formato](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.3.3_formato.png)

 y luego hacen click en _Format_ y voil√†!

![Formato autom√°tico de Dart](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.3.4_no_formateado_vs_formateado.png)

## Tests?

Podr√≠an decir que la tarea est√° terminada? Como dijimos, no tenemos forma de automatizar el proceso de testing sino que tendremos que hacerlo nosotros mismos por ahora. Vuelvan a los _requirements_, revisen su c√≥digo, luego el _output_ en la consola. Encuentran alguna diferencia? __Logramos exactamente lo que estaba pedido?__

Si no pudieron aun notar la diferencia, busquen un ratito m√°s.

ü§î

ü§∑üèª‚Äç‚ôÇÔ∏è

ü§¶üèª‚Äç‚ôÇÔ∏è

Ok! El requerimiento dec√≠a imprimir "Hola mundo" y el c√≥digo que escribimos imprime "hola mundo", siendo la primer letra en min√∫scula cuando debiera ser en may√∫scula.

Nuevamente nos encontramos con un caso super simple y pensamos que no genera mucha diferencia pero a veces, en el trabajo cotidiano pensamos de la misma forma dejando de lado lo que la persona que escribi√≥ el requerimiento pens√≥ con mucho esfuerzo.

De ser as√≠, lo mejor ser√≠a contactarte con esa persona y sugerirle que nuestro c√≥digo puede solucionar mejor su problema o que no hace mucha falta marcar la diferencia.

__Tratamos de que no solamente aprendan a escribir c√≥digo de calidad sino tambi√©n absorvan buenas pr√°cticas__ para con ustedes y sus compa√±eros y compa√±eras y tengan la oportunidad de amar esta profesi√≥n como nosotros lo hacemos!


''',
      ),
      CourseChapter(
        id: 3,
        title: 'Variables: declaraci√≥n e inicializaci√≥n',
        description: '',
        author: const AppAuthor(name: 'Mau Di Bert', picture: ''),
        published: DateTime.now(),
        readingTime: '1 minuto',
        content: '''
# Variables: declaraci√≥n e inicializaci√≥n

@Mau Di Bert

_Variables_ o variables (ü§£), son __especie de cajas que nos permiten guardar valores__ dentro. Seg√∫n aquello que queramos guardar vamos a necesitar tipos de cajas diferentes.

Si en nuestro programa quisi√©ramos __alojar__ nuestro nombre __para luego imprimirlo__, necesitar√≠amos una de estas variables. Limpien su Dartpad y empecemos!

_Requirement_: guardar nuestro nombre para luego imprimirlo.

```dart
void main() {
    // Ya vimos qu√© utilizamos en el pasado para imprimir
    // pero no vimos... ü§® ... este tipo de escritura en el c√≥digo!
    // Estos son comentarios de c√≥digo y pueden utilizarse
    // para hacer aclaraciones, guiar a otro programador u 
    // hasta incluso, organizarlo.
    // Ya hablaremos m√°s de ellos!

    // Ya conocemos que 'print()', imprime algo en pantalla.
    // Qu√© pasa si escribimos solamente esto?
    // Estar√≠amos creando nuestro primer test! üòç.
    // Hag√°mosla fallar y veamos qu√© nos dice!
    print();
}
```

![Faltan argumentos!](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.4.1_faltan_argumentos.png)

Ya aprendimos tambi√©n que una l√≠na de c√≥digo en _Dart_, tiene que finalizar con ';', por lo que sabemos ese no es el error que nos est√° mostrando. Pero adem√°s de esto, tenemos una explicaci√≥n bien clara: 'faltan argumentos'. Ya vimos en el pasado que `print('Hola mundo')` mostraba en consola la frase 'Hola mundo'. Cu√°l les parece entonces que podr√≠a ser el siguiente paso para _arreglar_ el test que creamos?

## üíÄ Aprendizaje muerto

Lo ideal, es que se tomen un tiempo para resolverlo ustedes solos antes de avanzar. De esa manera, van a hacer las conexiones neuronales necesarias para aprender! Por eso, vamos a introducir esto: üíÄ. Ese emoji representa la mism√≠sima muerte del aprendizaje! üòµ‚Äçüí´üôÑü§£. __Cada vez que lo vean, saquen los ojos de este art√≠culo y p√≥ngase a trabajar duro para resolver el ejercicio__. Pueden poner un cron√≥metro o _timer_ para determinar cu√°nto tiempo dedicarle antes de claudicar vilmente! üòÇ.

Creemos que ha sido suficiente escarmiento, as√≠ que podemos continuar!

__Qu√© es lo que solemos hacer cuando estamos con poco tiempo? Solemos ver parte de aquello que estamos haciendo porque estamos pensando en hacer algo m√°s__. Si hubi√©ramos querido _intentar resolver_ nuestro problema r√°pidamente, es probable que hubi√©ramos hecho algo como esto:

```dart
void main() {
    print('Mau');
}

```

Liiiiiiisto! Nuestro nombre impreso en pantalla! üôÑ Sin embargo, si nos detenemos unos instantes y leemos nuevamente el _requirement_, qu√© encontramos? Se los dejo por ac√° as√≠ no tienen que volver a buscarlo:

_Requirement_: guardar nuestro nombre para luego imprimirlo.

Si fu√©ramos lentamente, podr√≠amos dividir este pedido que nos han hecho, en dos partes: _1: guardar nuestro nombre_ para, _2: luego imprimirlo_. Pero c√≥mo guardamos nuestro nombre? Necesitar√≠amos una... _especie de caja que nos permita guardar valores_! üöÄ. Ha llegado el momento de introducir a las _variables_.

## Declaraci√≥n de variables

Una de estas cajas, __para ser creada, tiene que ser primero declarada__ y se hace escribiendo el tipo de caja que va a ser y luego el nombre que va a llevar y que represente de la forma m√°s clara posible aquello que queremos poner dentro (pensando siempre en que otra persona en el futuro puede llegar a leerla sin tener mucha idea del proyecto y tratando de que no tenga que razonar demasiado para entender su contenido): `String myName`.

_String_ significa 'cadena' y viene a representar un tipo de caja que almacena una serie de caracteres.
_myName_ es el nombre que eleg√≠ para representar precisamente lo que quiero hacer sin ser tan _verbose_ o explicarme demasiado de forma redundante, por ejemplo: `String developerThatIsWritingThisCodeName`.

En el nombre podemos utilizar letras, n√∫meros (siempre y cuando no sea el primer caracter) o _underscore_ ('_'), salvo caracteres o palabras espec√≠ficas de _Dart_ que van a ir aprendiendo en el camino. Sin embargo, como sus ojos de detectives programadoriles habr√°n notado, tienen que escribirse de una forma en particular: _Camel case_.

### camelCase

Cada lenguaje tiene sus espcificidades y esta es una de Dart: salvo la primer letra que debe escribirse en min√∫scula, cada palabra se diferencia comenzando con una may√∫scula. En espa√±ol ser√≠a 'algoComoEsto'.

Tenemos entonces hasta ahora la variable declarada. Ser√° que ya podemos utilizarla?

```dart
void main() {
    String myName;
    print(myName);
}
```

Noup! Tenemos el siguiente error:

_'The non-nullable local variable 'myName' must be assigned before it can be used.'._

En este caso, les copi√© directamente el mensaje de error porque es m√°s f√°cil que capturar la pantalla pero lo hice porque ustedes ya saben ver los errores y adem√°s, en esta profesi√≥n van a ver mucho m√°s c√≥digo que pantallas! üòÜ.

El mensaje dice: 'La variable local _no nulleable_, debe ser asignada antes de ser utilizada'. Bien extra√±o no? No lo es si respiramos, bajamos la velocidad y lo dividimos en partes m√°s peque√±as para entenderlo:

_la variable local_: significa que est√° en la pieza de c√≥digo que estamos escribiendo.
_no nulleable_: que s√≠ o s√≠ tiene que tener un valor; no puede inicializarse vac√≠a.
_debe ser asignada antes de ser utilizada_: le tenemos que proveer un valor, un contenido antes de usarla, la tenemos que _inicializar._

## Inicializaci√≥n de variables

Inicializar una variable es, __luego de que la variable ha sido declarada, ponerle un valor dentro__. Para hacerlo, utilizamos el siguiente orden, relaci√≥n de palabras o _sint√°xis_:

![Declaraci√≥n e inicializaci√≥n](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.4.2_declarar_e_inicializar.png)

En este caso, estamos hablando de una caja o _variable_ que almacenar√° una cadena de caracteres y la adecuada para este tipo de valores es un _String_.

Para crear un valor del tipo _String_, rodeamos dicho valor con comillas simples o _single-quotes_ ('valor'), con comillas dobles o _double-quotes_ ("valor") o si vamos a necesitar hacer l√≠neas m√∫ltiples o _multilines_, utilizamos comillas triples o _triple-quotes_ (\'\'\'
Este valor
Tiene varias
L√≠neas\'\'\'
).

__La pr√°ctica recomendada__ ser√≠a utilizar en la mayor cantidad de los casos __single-quotes__.

Ahora bien, ya con todo eso, tendr√≠amos todo lo necesario para completar a la perfecci√≥n nuestro _requirement_? üíÄ Intentalo!

Esperamos que te hayas tomado el tiempo para tratar de hacerlo vos mismo y no hayas sacrificado a tu pobre aprendizaje!

```dart
void main() {
    String myName = 'Mauro';
    print(myName);
}

```

Ahora s√≠ cumplimos con todos los requerimientos necesarios :muscle: :

- [x] Guardar nuestro nombre
- [x] Imprimirlo

### Yendo un poco m√°s all√°

Supongamos que en este programa que estamos construyendo queremos guardar adem√°s, nuestro segundo nombre, _en caso de que tengamos uno_. Qu√© pasa con aquellos que no tienen segundo nombre? C√≥mo va la aplicaci√≥n a guardar algo que podr√≠a no existir o ser... nulo? üò≥

#### Null value

Es un __valor utilizado para representar algo que no tiene valor.__
Dicho valor en _Dart_ recibe el nombre de _null_, un tipo especial de valor del que hablaremos bastante y bastantes dolores de cabeza nos vamos ahorrar si aprendemos de el desde el comienzo!

Lo primero que tenemos que hacer es cuando declaramos nuestra caja o _variable_, decirle que puede llegar a contener un valor nulo. C√≥mo hacemos esto? Simplemente agregando luego de su tipo, el operador de aserci√≥n nula o _null assertion operator_ (o bien pobremente llamado, signo de interrogaci¬¥√∏n '?' üòù) de esta manera: `String?` Todo entero quedar√≠a algo como... S√≠! Primero prueben ustedes c√≥mo ser√≠a guardar tanto el primer nombre como segundo nombre en sus c√≥digos, previendo que el segundo sea nulo. üíÄ

```dart
void main() {
    String myFirstName = 'Mauro';
    String? mySecondName = 'Ariel'; // como la üßú‚Äç‚ôÄÔ∏è 
    print (myFirstName + mySecondName);
}
```

Bien! F√≠jense que introdujimos algo nuevo y es la posibildad de _concatenar_ valores de texto con un '+'. Sin embargo, ya pudieron ver que al imprimirlo, ambos nombres quedan encimados. Vamos a hacer un poco m√°s de espacio, introduciendo justamente, un espacio:

```dart
void main() {
    String myFirstName = 'Mauro';
    String? mySecondName = 'Ariel'; // como la üßú‚Äç‚ôÄÔ∏è 
    print (myFirstName + ' ' + mySecondName);
}
```

Todo este tiempo estuvieron con ese subrayado azul y pudieron evitarlo sin decirme nada? No es un error sino una sugerencia. En este caso les dice que usen interpolaci√≥n para componer textos y valores (cosa que ya les explico) y se ver√≠a algo como as√≠:

![Usar interpolaci√≥n](https://raw.githubusercontent.com/themonkslab/courses/main/dart/2.dart_basico/2.4.3_usar_interpolacion.png)

La interpolaci√≥n ser√≠a el proceso de rodear con _single-quotes_ el texto. Va a representar exactamente lo que ustedes escriban incluyendo espacios aunque van a tener que utilizar un \$ para llamar a las variables. En este caso ser√≠a algo as√≠:

```dart
void main() {
    String myFirstName = 'Mauro';
    String? mySecondName = 'Ariel'; // como la üßú‚Äç‚ôÄÔ∏è 
    print ('\$myFirstName \$mySecondName');
}
```

Vamos a ver que logramos el mismo resultado aunque con una pr√°ctica recomendada por _Dart_ y tenemos un c√≥digo m√°s limpio!

Ahora bien... c√≥mo llenar√≠an ustedes este c√≥digo si no tuvieran segundo nombre? Hagan un intento solitos y solitas! üíÄ

Si hubieran introducido el valor nulo, habr√≠an tenido una recomendaci√≥n en la l√≠nea 4: No inicialicen variables expl√≠citamente usando el valor nulo. Por qu√© es esto? Porque _Dart_ lo hace por nosotros. Y valdr√≠a solamente con declarar esa variable. El resultado ser√≠a algo as√≠:

```dart
void main() {
    String myFirstName = 'Mauro';
    String? mySecondName; // me sacaron el segundo! 
    print ('\$myFirstName \$mySecondName'); // Imprimir√≠a: Mauro null
}
```

No es tampoco lo esperado verdad? De repente me llamo 'Mauro null'! ü§£ Vamos a cerrar este art√≠culo con algo un poco m√°s avanzado y que va a permitir que si el segundo nombre es nulo, entonces no lo imprima!

Este c√≥digo nuevo tiene __dos partes nuevas: {} y '??'__. Los __{}__ nos permiten elaborar alguna operaci√≥n en la que podemos si queremos, llamar a una variable. Por otro lado el __'??'__ es uno de los _null aware operators_ u operadores para trabajar valores nulos y nos permite devolver otra cosa si el valor que nosotros estamos llamando, es nulo. En este caso, si `mySecondName` es nulo, devolvemos una _String_ vac√≠a, representada as√≠: ''.

```dart
void main() {
    String myFirstName = 'Mauro';
    String? mySecondName; // Ahora soy millenial!
    print ('\$myFirstName \${mySecondName??''}');
}
```



''',
      ),
    ]),
  ],
);
